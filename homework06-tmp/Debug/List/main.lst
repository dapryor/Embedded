###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           26/Feb/2016  07:45:54
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.40
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\David\SkyDrive\ECE 306\homework06-tmp\main.c
#    Command line  =  
#        "C:\Users\David\SkyDrive\ECE 306\homework06-tmp\main.c" -lC
#        "C:\Users\David\SkyDrive\ECE 306\homework06-tmp\Debug\List" -o
#        "C:\Users\David\SkyDrive\ECE 306\homework06-tmp\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\David\SkyDrive\ECE 306\homework06-tmp\Debug\List\main.lst
#    Object file   =  
#        C:\Users\David\SkyDrive\ECE 306\homework06-tmp\Debug\Obj\main.r43
#
###############################################################################

C:\Users\David\SkyDrive\ECE 306\homework06-tmp\main.c
      1          //------------------------------------------------------------------------------
      2          //  File Name : main.c
      3          //
      4          //  Description: This file contains the Main Routine - "While" Operating System
      5          //
      6          //
      7          //  David Pryor
      8          //  Jan 2016
      9          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
     10          //------------------------------------------------------------------------------
     11          
     12          //------------------------------------------------------------------------------
     13          #include  "macros.h"
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          
     17          // Required defines
     18          // In the event the universe no longer exists, this bit will reset
     19          // ALWAYS                                       (1)
     20          // CNTL_STATE_INDEX                             (3) // Control States
     21          // SW1                  	                (0x01) // Switch 1
     22          // SW2                  	                (0x02) // Switch 2
     23          // START				        (0x00)
     24          // MAX_SIZE_COUNT			        (0x05) 
     25          // LINE_POS_1                                   (0x01) // starting postion on lcd
     26          // LINE_POS_2                                   (0x02) // starting postion on lcd
     27          // LINE_POS_3                                   (0x03) // starting postion on lcd
     28          // LCD--------------------------------------------------------------------------
     29          // LCD_HOME_L1	                                (0x80)
     30          // LCD_HOME_L2         	                        (0xA0)
     31          // LCD_HOME_L3         	                        (0xC0)
     32          // LCD_HOME_L4         	                        (0xE0)
     33          // LINE_SIZE				        (0x0B)
     34          // CASE NUMBERS (THESE ARE TEMPORARY FILLERS!)----------------------------------
     35          // COUNT_TWOFIDDY_MSEC			        (0x32) //50
     36          // COUNT_FIVEHUNNED_MSEC			(0x64) //100
     37          // COUNT_SEVENFIDDY_MSEC			(0x96) //150
     38          // COUNT_ONETHOUSAND_MSEC			(0xC8) //200
     39          // COUNT_TWELVEFIDDY_MSEC			(0xFA) //250
     40          // SWITCHES---------------------------------------------------------------------
     41          // SWITCH_OFF				        (0x00)
     42          // SWITCH_ON			                (0x01)
     43          //------------------------------------------------------------------------------
     44          
     45          
     46          
     47          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          volatile unsigned char control_state[CNTL_STATE_INDEX];
   \                     control_state:
   \   000000                DS8 3

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     50          char led_smclk;
   \                     led_smclk:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     52          volatile unsigned int five_msec_delay;
   \                     five_msec_delay:
   \   000000                DS8 2
     53          extern char display_line_1[LINE_SIZE];
     54          extern char display_line_2[LINE_SIZE];
     55          extern char display_line_3[LINE_SIZE];
     56          extern char display_line_4[LINE_SIZE];
     57          extern char *display_1;
     58          extern char *display_2;
     59          extern char *display_3;
     60          extern char *display_4;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     61          char posL1;
   \                     posL1:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     62          char posL2;
   \                     posL2:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     63          char posL3;
   \                     posL3:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     64          char posL4;
   \                     posL4:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     65          char size_count;
   \                     size_count:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     66          char big;
   \                     big:
   \   000000                DS8 1
     67          extern volatile unsigned int switch_one_pressed;
     68          extern volatile unsigned int switch_two_pressed;
     69          
     70          

   \                                 In  segment CODE, align 2
     71          void main(void){
   \                     main:
     72          //==============================================================================
     73          // Main Program
     74          // 
     75          // Description: This function contains the while loop that runs continuously
     76          // to act for the operating system. It also calls all the functions to
     77          // initialize the system.
     78          //
     79          // Passed : no variables passed
     80          // Locals: no variables declared
     81          // Returned: no values returned
     82          // Globals:     volatile unsigned int Time_Sequence;
     83          //              volatile char one_time;
     84          //              char* display_1
     85          //              char* display_2
     86          //              char* display_3
     87          //              char* display_4
     88          //              slow_input_down
     89          //              control_state[CNTL_STATE_INDEX]
     90          //              char big
     91          //              char size_count;
     92          //              char posL1
     93          //              char posL2
     94          //              char posL3
     95          //              char posL4
     96          //
     97          // Author: David Pryor
     98          // Date: Feb 2016
     99          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (6.4.1)
    100          //==============================================================================
    101            Init_Ports();                             // Initialize Ports
   \   000000   ........     CALLA   #Init_Ports
    102            Init_Clocks();                            // Initialize Clock System 
   \   000004   ........     CALLA   #Init_Clocks
    103            Init_Conditions();
   \   000008   ........     CALLA   #Init_Conditions
    104            Time_Sequence = SWITCH_OFF;               // 
   \   00000C   8243....     MOV.W   #0x0, &Time_Sequence
    105            Init_Timers();                            // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
    106            //Five_msec_Delay(COUNT_TWOFIDDY_MSEC);     // 250 msec delay for the clock to settle (50)
    107            Init_LEDs();                              // Initialize LEDs
   \   000014   ........     CALLA   #Init_LEDs
    108            Init_LCD();                               // Initialize LCD
   \   000018   ........     CALLA   #Init_LCD
    109            
    110          
    111          //------------------------------------------------------------------------------
    112          // Begining of the "While" Operating System
    113          //------------------------------------------------------------------------------
    114           while(ALWAYS) {                            // Can the Operating system run
    115            if(switch_one_pressed){
   \                     ??main_0:
   \   00001C   8293....     CMP.W   #0x0, &switch_one_pressed
   \   000020   0924         JEQ     ??main_1
    116              display_4 = "SW1";
   \   000022   B240........ MOV.W   #`?<Constant "SW1">`, &display_4
    117              posL4 = LINE_POS_1;
   \   000028   D243....     MOV.B   #0x1, &posL4
    118              Display_Process();
   \   00002C   ........     CALLA   #Display_Process
    119              switch_one_pressed = SWITCH_OFF;
   \   000030   8243....     MOV.W   #0x0, &switch_one_pressed
    120            }
    121            
    122            if(switch_two_pressed){
   \                     ??main_1:
   \   000034   8293....     CMP.W   #0x0, &switch_two_pressed
   \   000038   F127         JEQ     ??main_0
    123              display_4 = "SW2";
   \   00003A   B240........ MOV.W   #`?<Constant "SW2">`, &display_4
    124              posL4 = LINE_POS_1;
   \   000040   D243....     MOV.B   #0x1, &posL4
    125              Display_Process();
   \   000044   ........     CALLA   #Display_Process
    126              switch_two_pressed = SWITCH_OFF;
   \   000048   8243....     MOV.W   #0x0, &switch_two_pressed
   \   00004C   E73F         JMP     ??main_0
   \   00004E   0343         NOP
    127            }
    128           }
    129          //------------------------------------------------------------------------------
    130          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "SW1">`:
   \   000000   53573100     DC8 "SW1"

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "SW2">`:
   \   000000   53573200     DC8 "SW2"
    131          
    132          
    133          
    134          
    135          
    136          
    137          
    138          
    139          
    140          
    141          
    142          
    143          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_Timers


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "SW1">
       4  ?<Constant "SW2">
       2  Time_Sequence
       1  big
       3  control_state
       2  five_msec_delay
       1  led_smclk
      80  main
       1  one_time
       1  posL1
       1  posL2
       1  posL3
       1  posL4
       1  size_count

 
 80 bytes in segment CODE
  8 bytes in segment DATA16_C
 15 bytes in segment DATA16_Z
 
 80 bytes of CODE  memory
  8 bytes of CONST memory
 15 bytes of DATA  memory

Errors: none
Warnings: none
