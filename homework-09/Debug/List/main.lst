###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           08/Apr/2016  07:53:28
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.40
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\David\Documents\ECE 306\homework-09\main.c
#    Command line  =  
#        "C:\Users\David\Documents\ECE 306\homework-09\main.c" -lC
#        "C:\Users\David\Documents\ECE 306\homework-09\Debug\List" -o
#        "C:\Users\David\Documents\ECE 306\homework-09\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\David\Documents\ECE 306\homework-09\Debug\List\main.lst
#    Object file   =  
#        C:\Users\David\Documents\ECE 306\homework-09\Debug\Obj\main.r43
#
###############################################################################

C:\Users\David\Documents\ECE 306\homework-09\main.c
      1          //------------------------------------------------------------------------------
      2          //  File Name : main.c
      3          //
      4          //  Description: This file contains the Main Routine - "While" Operating System
      5          //
      6          //
      7          //  David Pryor
      8          //  Jan 2016
      9          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
     10          //------------------------------------------------------------------------------
     11          
     12          //------------------------------------------------------------------------------
     13          #include  "macros.h"
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          
     17          // Required defines
     18          // In the event the universe no longer exists, this bit will reset
     19          // ALWAYS                                       (1)
     20          // CNTL_STATE_INDEX                             (3) // Control States
     21          // SW1                  	                (0x01) // Switch 1
     22          // SW2                  	                (0x02) // Switch 2
     23          // START				        (0x00)
     24          // MAX_SIZE_COUNT			        (0x05) 
     25          // LINE_POS_1                                   (0x01) // starting postion on lcd
     26          // LINE_POS_2                                   (0x02) // starting postion on lcd
     27          // LINE_POS_3                                   (0x03) // starting postion on lcd
     28          // LCD--------------------------------------------------------------------------
     29          // LCD_HOME_L1	                                (0x80)
     30          // LCD_HOME_L2         	                        (0xA0)
     31          // LCD_HOME_L3         	                        (0xC0)
     32          // LCD_HOME_L4         	                        (0xE0)
     33          // LINE_SIZE				        (0x0B)
     34          // CASE NUMBERS (THESE ARE TEMPORARY FILLERS!)----------------------------------
     35          // COUNT_TWOFIDDY_MSEC			        (0x32) //50
     36          // COUNT_FIVEHUNNED_MSEC			(0x64) //100
     37          // COUNT_SEVENFIDDY_MSEC			(0x96) //150
     38          // COUNT_ONETHOUSAND_MSEC			(0xC8) //200
     39          // COUNT_TWELVEFIDDY_MSEC			(0xFA) //250
     40          // SWITCHES---------------------------------------------------------------------
     41          // SWITCH_OFF				        (0x00)
     42          // SWITCH_ON			                (0x01)
     43          //------------------------------------------------------------------------------
     44          
     45          
     46          
     47          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          volatile unsigned char control_state[CNTL_STATE_INDEX];
   \                     control_state:
   \   000000                DS8 3

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     50          char led_smclk;
   \                     led_smclk:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     52          volatile unsigned int five_msec_delay;
   \                     five_msec_delay:
   \   000000                DS8 2
     53          extern char display_line_1[LINE_SIZE];
     54          extern char display_line_2[LINE_SIZE];
     55          extern char display_line_3[LINE_SIZE];
     56          extern char display_line_4[LINE_SIZE];
     57          extern char *display_1;
     58          extern char *display_2;
     59          extern char *display_3;
     60          extern char *display_4;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     61          char posL1;
   \                     posL1:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     62          char posL2;
   \                     posL2:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     63          char posL3;
   \                     posL3:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     64          char posL4;
   \                     posL4:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     65          char size_count;
   \                     size_count:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     66          char big;
   \                     big:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     67          volatile unsigned int do_this = FALSE;
   \                     do_this:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     68          volatile unsigned int display_count = 0; //used to write display every 250ms
   \                     display_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     69          char adc_char[5];
   \                     adc_char:
   \   000000                DS8 5

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     70          volatile unsigned int ADC_Left_Detector;
   \                     ADC_Left_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     71          volatile unsigned int ADC_Right_Detector;
   \                     ADC_Right_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     72          volatile unsigned int ADC_Thumb;
   \                     ADC_Thumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     73          unsigned int left_calibration_black;
   \                     left_calibration_black:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     74          unsigned int right_calibration_black;
   \                     right_calibration_black:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     75          unsigned int left_calibration_white;
   \                     left_calibration_white:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     76          unsigned int right_calibration_white;
   \                     right_calibration_white:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     77          unsigned int left_calibration_ambient;
   \                     left_calibration_ambient:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     78          unsigned int right_calibration_ambient;
   \                     right_calibration_ambient:
   \   000000                DS8 2
     79          extern volatile unsigned int switch_one_pressed;
     80          extern volatile unsigned int switch_two_pressed;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     81          unsigned int menu_items = FALSE;
   \                     menu_items:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     82          unsigned int threshold;
   \                     threshold:
   \   000000                DS8 2
     83          extern volatile char USB_Char_Rx0[SMALL_RING_SIZE];
     84          extern volatile char USB_Char_Tx0[LARGE_RING_SIZE];
     85          extern volatile char USB_Char_Rx1[SMALL_RING_SIZE];
     86          extern volatile char USB_Char_Tx1[LARGE_RING_SIZE];

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     87          char transmission[16] = " NCSU  #1 ";
   \                     transmission:
   \   000000                DS8 16
   \   000010                REQUIRE `?<Initializer for transmission>`

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     88          char received0[16];
   \                     received0:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     89          char received1[16];
   \                     received1:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     90          volatile int passed_value = FALSE;
   \                     passed_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     91          volatile int pass_flag=FALSE;
   \                     pass_flag:
   \   000000                DS8 2
     92          
     93          

   \                                 In  segment CODE, align 2
     94          void main(void){
   \                     main:
     95          //==============================================================================
     96          // Main Program
     97          // 
     98          // Description: This function contains the while loop that runs continuously
     99          // to act for the operating system. It also calls all the functions to
    100          // initialize the system.
    101          //
    102          // Passed : no variables passed
    103          // Locals: no variables declared
    104          // Returned: no values returned
    105          // Globals:     volatile unsigned int Time_Sequence;
    106          //              volatile char one_time;
    107          //              char* display_1
    108          //              char* display_2
    109          //              char* display_3
    110          //              char* display_4
    111          //              slow_input_down
    112          //              control_state[CNTL_STATE_INDEX]
    113          //              char big
    114          //              char size_count;
    115          //              char posL1
    116          //              char posL2
    117          //              char posL3
    118          //              char posL4
    119          //
    120          // Author: David Pryor
    121          // Date: Feb 2016
    122          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (6.4.1)
    123          //==============================================================================
    124            Init_Ports();                             // Initialize Ports
   \   000000   ........     CALLA   #Init_Ports
    125            Init_Clocks();                            // Initialize Clock System 
   \   000004   ........     CALLA   #Init_Clocks
    126            Init_Conditions();
   \   000008   ........     CALLA   #Init_Conditions
    127            Time_Sequence = SWITCH_OFF;               // 
   \   00000C   8243....     MOV.W   #0x0, &Time_Sequence
    128            Init_Timers();                            // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
    129            Init_LEDs();                              // Initialize LEDs
   \   000014   ........     CALLA   #Init_LEDs
    130            Init_LCD();                               // Initialize LCD
   \   000018   ........     CALLA   #Init_LCD
    131            Init_ADC();                               // Initialize ADC
   \   00001C   ........     CALLA   #Init_ADC
    132            Init_Serial_UCA1(TRUE);                      // BAUD rate 9600
   \   000020   1C43         MOV.W   #0x1, R12
   \   000022   ........     CALLA   #Init_Serial_UCA1
    133            Init_Serial_UCA0(TRUE);                      // BAUD rate 9600
   \   000026   1C43         MOV.W   #0x1, R12
   \   000028   ........     CALLA   #Init_Serial_UCA0
    134            
    135            
    136            lcd_BIG_mid();
   \   00002C   ........     CALLA   #lcd_BIG_mid
    137            display_1 = "  David   ";
   \   000030   B240........ MOV.W   #`?<Constant "  David   ">`, &display_1
    138            display_2 = "Homework 9";  
   \   000036   B240........ MOV.W   #`?<Constant "Homework 9">`, &display_2
    139            display_3 = "  Pryor   ";
   \   00003C   B240........ MOV.W   #`?<Constant "  Pryor   ">`, &display_3
    140            display_4 = "";
   \   000042   B240........ MOV.W   #`?<Constant "">`, &display_4
    141            Display_Process();
   \   000048   ........     CALLA   #Display_Process
    142          
    143          
    144          
    145          //------------------------------------------------------------------------------
    146          // Begining of the "While" Operating System
    147          //------------------------------------------------------------------------------
    148            while(ALWAYS) {                            // Can the Operating system run
    149              
    150              ADC_Process();              // call sampling function
   \                     ??main_0:
   \   00004C   ........     CALLA   #ADC_Process
    151              
    152              if(menu_items){  //start menu
   \   000050   8293....     CMP.W   #0x0, &menu_items
   \   000054   FB27         JEQ     ??main_0
    153                switch_one_pressed = FALSE; //switch one off
   \   000056   8243....     MOV.W   #0x0, &switch_one_pressed
    154                switch_two_pressed = FALSE; //switch two off
   \   00005A   8243....     MOV.W   #0x0, &switch_two_pressed
    155                Menu_Process();
   \   00005E   ........     CALLA   #Menu_Process
   \   000062   F43F         JMP     ??main_0
   \   000064   0343         NOP
    156              }
    157              
    158            }
    159          //------------------------------------------------------------------------------
    160          }

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for transmission>`:
   \   000000   204E43535520 DC8 " NCSU  #1 "
   \            2023312000  
   \   00000B   0000000000   DC8 0, 0, 0, 0, 0

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  David   ">`:
   \   000000   202044617669 DC8 "  David   "
   \            6420202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Homework 9">`:
   \   000000   486F6D65776F DC8 "Homework 9"
   \            726B203900  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  Pryor   ">`:
   \   000000   20205072796F DC8 "  Pryor   "
   \            7220202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""
    161          
    162          
    163          
    164          
    165          
    166          
    167          
    168          
    169          
    170          
    171          
    172          
    173          
    174          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> ADC_Process
        4   -> Display_Process
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_Serial_UCA0
        4   -> Init_Serial_UCA1
        4   -> Init_Timers
        4   -> Menu_Process
        4   -> lcd_BIG_mid


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "  David   ">
      11  ?<Constant "  Pryor   ">
       1  ?<Constant "">
      11  ?<Constant "Homework 9">
      16  ?<Initializer for transmission>
       2  ADC_Left_Detector
       2  ADC_Right_Detector
       2  ADC_Thumb
       2  Time_Sequence
       5  adc_char
       1  big
       3  control_state
       2  display_count
       2  do_this
       2  five_msec_delay
       1  led_smclk
       2  left_calibration_ambient
       2  left_calibration_black
       2  left_calibration_white
     102  main
       2  menu_items
       1  one_time
       2  pass_flag
       2  passed_value
       1  posL1
       1  posL2
       1  posL3
       1  posL4
      16  received0
      16  received1
       2  right_calibration_ambient
       2  right_calibration_black
       2  right_calibration_white
       1  size_count
       2  threshold
      16  transmission

 
 102 bytes in segment CODE
  34 bytes in segment DATA16_C
  16 bytes in segment DATA16_I
  16 bytes in segment DATA16_ID
  82 bytes in segment DATA16_Z
 
 102 bytes of CODE  memory
  50 bytes of CONST memory
  98 bytes of DATA  memory

Errors: none
Warnings: none
