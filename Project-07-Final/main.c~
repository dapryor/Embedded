//------------------------------------------------------------------------------
//
//  Description: This file contains the Main Routine - "While" Operating System
//
//
//  David Pryor
//  Jan 2016
//  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
#include  "macros.h"
#include  "msp430.h"
#include  "functions.h"

// Required defines
// In the event the universe no longer exists, this bit will reset
// #define ALWAYS                  (1)
// #define CNTL_STATE_INDEX        (3) // Control States
// #define IOT_WAKEUP           	(0x01) // LED 1
// #define IOT_FACTORY   			(0x02) // LED 2
// #define IOT_STA_MINIAP       	(0x04) // LED 3
// #define R_FORWARD        		(0x10) // LED 5
// #define R_REVERSE        		(0x20) // LED 6
// #define L_FORWARD        		(0x40) // LED 7
// #define L_REVERSE        		(0x80) // LED 8
// #define SW1                  	(0x01) // Switch 1
// #define SW2                  	(0x02) // Switch 2
// #define MAX_SIZE_COUNT			(0x05) 
// LCD
// #define LCD_HOME_L1	         (0x80)
// #define LCD_HOME_L2         	(0xA0)
// #define LCD_HOME_L3         	(0xC0)
// #define LCD_HOME_L4         	(0xE0)
// #define LINE_SIZE					(0x0B)
// CASE NUMBERS (THESE ARE TEMPORARY FILLERS!)
// FIDDY									(0x32)
// ONEHUNNED							(0x64)
// ONEFIDDY								(0x96)
// TWOHUNNED							(0xC8)
// TWOFIDDY								(0xFA)
// SWITCHES
// #define SWITCH_OFF				(0x00)
//	#define SWITCH_ON					(0x01)



// Global Variables
volatile unsigned char control_state[CNTL_STATE_INDEX];
volatile unsigned int Time_Sequence;
char led_smclk;
volatile char one_time;
volatile unsigned int five_msec_count;
extern char display_line_1[LINE_SIZE];
extern char display_line_2[LINE_SIZE];
extern char display_line_3[LINE_SIZE];
extern char display_line_4[LINE_SIZE];
extern char *display_1;
extern char *display_2;
extern char *display_3;
extern char *display_4;
char posL1;
char posL2;
char posL3;
char posL4;
char size_count;
char big;

void main(void){
//------------------------------------------------------------------------------
// Main Program
// This is the main routine for the program. Execution of code starts here.
// The operating system is Back Ground Fore Ground.
// 
//------------------------------------------------------------------------------
  Init_Ports();                             // Initialize Ports
  Init_Clocks();                            // Initialize Clock System 
  Init_Conditions();
  PJOUT |= IOT_WAKEUP;                      // Turn LED 1 on to indicate boot
  Time_Sequence = SWITCH_OFF;               // 
  Init_Timers();                            // Initialize Timers
  five_msec_sleep(TWOFIDDY);                // 250 msec delay for the clock to settle (50)
  Init_LEDs();                              // Initialize LEDs
  Init_LCD();                               // Initialize LCD
  
//             1234567890
  display_1 = "NCSU";
  posL1 = 3;
  display_2 = "WOLFPACK";
  posL2 = 1;
  display_3 = "ECE306";
  posL3 = 2;
  display_4 = "D Pryor";
  posL4 = 1;
  big = SWITCH_OFF;
  Display_Process();
//------------------------------------------------------------------------------
// Begining of the "While" Operating System
//------------------------------------------------------------------------------
 while(ALWAYS) {                            // Can the Operating system run
  switch(Time_Sequence){
    case TWOFIDDY:                          // 1250 msec  (250)
      if(one_time){
        Init_LEDs();                        // Initialize LEDs
        one_time = SWITCH_OFF;
      }
      Time_Sequence = SWITCH_OFF;           // 
    case TWOHUNNED:                         // 1000 msec  (200)  
      if(one_time){
        P3OUT |= R_FORWARD;                 // Change State of LED 5
        one_time = SWITCH_OFF;
      }
    case ONEFIDDY:                          // 750 msec   (150) 
      if(one_time){
        PJOUT |= IOT_STA_MINIAP;            // Change State of LED 3
        P3OUT |= R_REVERSE;                 // Change State of LED 6
        one_time = SWITCH_OFF;
      }
    case ONEHUNNED:                         // 500 msec   (100) 
      if(one_time){
        PJOUT |= IOT_FACTORY;               // Change State of LED 2
        P3OUT |= L_FORWARD;                 // Change State of LED 7
        one_time = SWITCH_OFF;
      }
    case  FIDDY:  	                       // 250 msec   (50)
      if(one_time){
        PJOUT |= IOT_WAKEUP;                // Change State of LED 1
        P3OUT |= L_REVERSE;                 // Change State of LED 8
        one_time = SWITCH_OFF;
      }
      size_count++;
      if(size_count > 5){
        size_count = SWITCH_OFF;
        if(big){
          lcd_BIG_mid();
          big = SWITCH_OFF;
        }else{
          lcd_4line();
          big = SWITCH_ON;
        }
      }
        Display_Process();
      break;                                // 
    default: break; 
  }
  Switches_Process();                       // Check for switch state change 
  if(Time_Sequence > TWOFIDDY){
    Time_Sequence = SWITCH_OFF;
  }
 }
//------------------------------------------------------------------------------
}













