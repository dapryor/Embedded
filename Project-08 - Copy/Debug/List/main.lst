###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           25/Apr/2016  02:34:35
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.40
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\David\Documents\ECE 306\Project-08 - Copy\main.c
#    Command line  =  
#        "C:\Users\David\Documents\ECE 306\Project-08 - Copy\main.c" -lC
#        "C:\Users\David\Documents\ECE 306\Project-08 - Copy\Debug\List" -o
#        "C:\Users\David\Documents\ECE 306\Project-08 - Copy\Debug\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\David\Documents\ECE 306\Project-08 - Copy\Debug\List\main.lst
#    Object file   =  
#        C:\Users\David\Documents\ECE 306\Project-08 - Copy\Debug\Obj\main.r43
#
###############################################################################

C:\Users\David\Documents\ECE 306\Project-08 - Copy\main.c
      1          //------------------------------------------------------------------------------
      2          //  File Name : main.c
      3          //
      4          //  Description: This file contains the Main Routine - "While" Operating System
      5          //
      6          //
      7          //  David Pryor
      8          //  Jan 2016
      9          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
     10          //------------------------------------------------------------------------------
     11          
     12          //------------------------------------------------------------------------------
     13          #include  "macros.h"
     14          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x322
   \   union <unnamed> _A_PJOUT_L
   \                     _A_PJOUT_L:
   \   000000                DS8 2
     15          #include  "functions.h"
     16          
     17          // Required defines
     18          // In the event the universe no longer exists, this bit will reset
     19          // ALWAYS                                       (1)
     20          // CNTL_STATE_INDEX                             (3) // Control States
     21          // SW1                  	                (0x01) // Switch 1
     22          // SW2                  	                (0x02) // Switch 2
     23          // START				        (0x00)
     24          // MAX_SIZE_COUNT			        (0x05) 
     25          // LINE_POS_1                                   (0x01) // starting postion on lcd
     26          // LINE_POS_2                                   (0x02) // starting postion on lcd
     27          // LINE_POS_3                                   (0x03) // starting postion on lcd
     28          // LCD--------------------------------------------------------------------------
     29          // LCD_HOME_L1	                                (0x80)
     30          // LCD_HOME_L2         	                        (0xA0)
     31          // LCD_HOME_L3         	                        (0xC0)
     32          // LCD_HOME_L4         	                        (0xE0)
     33          // LINE_SIZE				        (0x0B)
     34          // CASE NUMBERS (THESE ARE TEMPORARY FILLERS!)----------------------------------
     35          // COUNT_TWOFIDDY_MSEC			        (0x32) //50
     36          // COUNT_FIVEHUNNED_MSEC			(0x64) //100
     37          // COUNT_SEVENFIDDY_MSEC			(0x96) //150
     38          // COUNT_ONETHOUSAND_MSEC			(0xC8) //200
     39          // COUNT_TWELVEFIDDY_MSEC			(0xFA) //250
     40          // SWITCHES---------------------------------------------------------------------
     41          // SWITCH_OFF				        (0x00)
     42          // SWITCH_ON			                (0x01)
     43          //------------------------------------------------------------------------------
     44          
     45          
     46          
     47          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          volatile unsigned char control_state[CNTL_STATE_INDEX];
   \                     control_state:
   \   000000                DS8 3
     49          //volatile unsigned int Time_Sequence;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     50          char led_smclk;
   \                     led_smclk:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     52          volatile unsigned int five_msec_delay;
   \                     five_msec_delay:
   \   000000                DS8 2
     53          extern char display_line_1[LINE_SIZE];
     54          extern char display_line_2[LINE_SIZE];
     55          extern char display_line_3[LINE_SIZE];
     56          extern char display_line_4[LINE_SIZE];
     57          extern char *display_1;
     58          extern char *display_2;
     59          extern char *display_3;
     60          extern char *display_4;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     61          char posL1;
   \                     posL1:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     62          char posL2;
   \                     posL2:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     63          char posL3;
   \                     posL3:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     64          char posL4;
   \                     posL4:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     65          volatile unsigned int display_count = 0; //used to write display every 250ms
   \                     display_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     66          char adc_char[5];
   \                     adc_char:
   \   000000                DS8 5

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     67          volatile unsigned int ADC_Left_Detector;
   \                     ADC_Left_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     68          volatile unsigned int ADC_Right_Detector;
   \                     ADC_Right_Detector:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     69          volatile unsigned int ADC_Thumb;
   \                     ADC_Thumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     70          unsigned int left_calibration_black;
   \                     left_calibration_black:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     71          unsigned int right_calibration_black;
   \                     right_calibration_black:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     72          unsigned int left_calibration_white;
   \                     left_calibration_white:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     73          unsigned int right_calibration_white;
   \                     right_calibration_white:
   \   000000                DS8 2
     74          //unsigned int left_calibration_ambient;
     75          //unsigned int right_calibration_ambient;
     76          extern volatile unsigned int switch_one_pressed;
     77          extern volatile unsigned int switch_two_pressed;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     78          unsigned int menu_items = FALSE;
   \                     menu_items:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     79          unsigned int thresholdR;
   \                     thresholdR:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     80          unsigned int thresholdL;
   \                     thresholdL:
   \   000000                DS8 2
     81          extern volatile char USB_Char_Rx0[SMALL_RING_SIZE];
     82          extern volatile char USB_Char_Rx1[SMALL_RING_SIZE];
     83          extern unsigned int BaudMenuFG;
     84          extern unsigned int IOTMenuFG;
     85          extern unsigned int MainFG;
     86          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     87          volatile char commandBuffer[30];
   \                     commandBuffer:
   \   000000                DS8 30

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     88          volatile unsigned int commandIndex=0;
   \                     commandIndex:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     89          unsigned int writeCommandFG=FALSE;
   \                     writeCommandFG:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     90          unsigned int i, j, k; //counter variable
   \                     i:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     j:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     k:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     91          volatile unsigned int transmitFG=TRUE;
   \                     transmitFG:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for transmitFG>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     92          volatile unsigned int StartCommandFG=FALSE;
   \                     StartCommandFG:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     93          unsigned int macFG=FALSE;
   \                     macFG:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     94          volatile char IOTBufferReceive[100];
   \                     IOTBufferReceive:
   \   000000                DS8 100

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     95          volatile unsigned int IOTIndexTransmit = FALSE;
   \                     IOTIndexTransmit:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     96          volatile unsigned int IOTIndexReceive = FALSE;
   \                     IOTIndexReceive:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     97          volatile unsigned int newLineFG=FALSE;
   \                     newLineFG:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     98          char SSIDBuff[11];
   \                     SSIDBuff:
   \   000000                DS8 11

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     99          char firstipBuff[11] = "";
   \                     firstipBuff:
   \   000000                DS8 11

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    100          char secondipBuff[11] = "";
   \                     secondipBuff:
   \   000000                DS8 11

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    101          char *macPtr;
   \                     macPtr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    102          char *ipPtr;
   \                     ipPtr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    103          char *SSIDPtr;
   \                     SSIDPtr:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    104          unsigned int countP = FALSE;
   \                     countP:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    105          volatile char receiving[100];
   \                     receiving:
   \   000000                DS8 100

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    106          volatile unsigned int receivingInd=0;
   \                     receivingInd:
   \   000000                DS8 2
    107          //project 8

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    108          unsigned int start_on_whiteFG = FALSE;
   \                     start_on_whiteFG:
   \   000000                DS8 2
    109          extern volatile unsigned int right_forward_rate;
    110          extern volatile unsigned int right_reverse_rate;
    111          extern volatile unsigned int left_forward_rate;
    112          extern volatile unsigned int left_reverse_rate;
    113          extern unsigned int startBlackLine;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    114          unsigned int black_line_stop=RESET;
   \                     black_line_stop:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    115          unsigned int display_IPFG;
   \                     display_IPFG:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    116          volatile unsigned int reconnectTimer = RESET;
   \                     reconnectTimer:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    117          volatile unsigned int pingTimer = RESET;
   \                     pingTimer:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    118          volatile unsigned int trackTimer = RESET;
   \                     trackTimer:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
    119          unsigned int startTrackFG = FALSE;
   \                     startTrackFG:
   \   000000                DS8 2
    120          
    121          

   \                                 In  segment CODE, align 2
    122          void main(void){
   \                     main:
    123          //==============================================================================
    124          // Main Program
    125          // 
    126          // Description: This function contains the while loop that runs continuously
    127          // to act for the operating system. It also calls all the functions to
    128          // initialize the system.
    129          //
    130          // Passed : no variables passed
    131          // Locals: no variables declared
    132          // Returned: no values returned
    133          // Globals:     volatile unsigned int Time_Sequence;
    134          //              volatile char one_time;
    135          //              char* display_1
    136          //              char* display_2
    137          //              char* display_3
    138          //              char* display_4
    139          //              slow_input_down
    140          //              control_state[CNTL_STATE_INDEX]
    141          //              char big
    142          //              char size_count;
    143          //              char posL1
    144          //              char posL2
    145          //              char posL3
    146          //              char posL4
    147          //
    148          // Author: David Pryor
    149          // Date: Feb 2016
    150          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (6.4.1)
    151          //=========================================10.138.6=====================================
    152            Init_Ports();                             // Initialize Ports
   \   000000   ........     CALLA   #Init_Ports
    153            Init_Clocks();                            // Initialize Clock System 
   \   000004   ........     CALLA   #Init_Clocks
    154            Init_Conditions();
   \   000008   ........     CALLA   #Init_Conditions
    155            Init_Timers();                            // Initialize Timers
   \   00000C   ........     CALLA   #Init_Timers
    156            Init_LEDs();                              // Initialize LEDs
   \   000010   ........     CALLA   #Init_LEDs
    157            Init_LCD();                               // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
    158            Init_ADC();                               // Initialize ADC
   \   000018   ........     CALLA   #Init_ADC
    159            Init_Serial_UCA1(0);                      // BAUD rate 115200
   \   00001C   0C43         MOV.W   #0x0, R12
   \   00001E   ........     CALLA   #Init_Serial_UCA1
    160            Init_Serial_UCA0(1);                      // BAUD rate 9600
   \   000022   1C43         MOV.W   #0x1, R12
   \   000024   ........     CALLA   #Init_Serial_UCA0
    161            Five_msec_Delay(1);
   \   000028   1C43         MOV.W   #0x1, R12
   \   00002A   ........     CALLA   #Five_msec_Delay
    162            PJOUT |= IOT_STA_MINIAP; //turning on miniap (only works this way)
   \   00002E   A2D22203     BIS.W   #0x4, &0x322
    163            IR_LED_OFF();
   \   000032   ........     CALLA   #IR_LED_OFF
    164            lcd_BIG_mid();
   \   000036   ........     CALLA   #lcd_BIG_mid
    165            display_1 = "  Waiting  ";
   \   00003A   B240........ MOV.W   #`?<Constant "  Waiting  ">`, &display_1
    166            display_2 = "    for";  
   \   000040   B240........ MOV.W   #`?<Constant "    for">`, &display_2
    167            display_3 = "  Command  ";
   \   000046   B240........ MOV.W   #`?<Constant "  Command  ">`, &display_3
    168            display_4 = "";
   \   00004C   B240........ MOV.W   #`?<Constant "">`, &display_4
    169            Display_Process();
   \   000052   ........     CALLA   #Display_Process
    170          
    171          
    172          
    173          
    174          //------------------------------------------------------------------------------
    175          // Begining of the "While" Operating System
    176          //------------------------------------------------------------------------------
    177            while(ALWAYS) {                            // Can the Operating system run
    178              
    179              ADC_Process();              // call sampling function
   \                     ??main_0:
   \   000056   ........     CALLA   #ADC_Process
    180              if(MainFG){
   \   00005A   8293....     CMP.W   #0x0, &MainFG
   \   00005E   0324         JEQ     ??main_1
    181                Menu_Process();
   \   000060   ........     CALLA   #Menu_Process
   \   000064   363C         JMP     ??main_2
    182              }
    183              else if(BaudMenuFG){
   \                     ??main_1:
   \   000066   8293....     CMP.W   #0x0, &BaudMenuFG
   \   00006A   0324         JEQ     ??main_3
    184                Baud_Menu(); 
   \   00006C   ........     CALLA   #Baud_Menu
   \   000070   303C         JMP     ??main_2
    185              }
    186              else if(IOTMenuFG){
   \                     ??main_3:
   \   000072   8293....     CMP.W   #0x0, &IOTMenuFG
   \   000076   0324         JEQ     ??main_4
    187                IOT_Menu();
   \   000078   ........     CALLA   #IOT_Menu
   \   00007C   2A3C         JMP     ??main_2
    188              }
    189              else if(display_IPFG){
   \                     ??main_4:
   \   00007E   8293....     CMP.W   #0x0, &display_IPFG
   \   000082   2724         JEQ     ??main_2
    190                display_1 = "";
   \   000084   B240........ MOV.W   #`?<Constant "">`, &display_1
    191                HEXtoBCD(trackTimer/FOR_ONE_SECOND);
   \   00008A   1C42....     MOV.W   &trackTimer, R12
   \   00008E   3E40C800     MOV.W   #0xc8, R14
   \   000092   ........     CALLA   #?DivMod16u
   \   000096   ........     CALLA   #HEXtoBCD
    192                display_2 = adc_char;;
   \   00009A   B240........ MOV.W   #adc_char, &display_2
    193                //ipPtr=firstipBuff;
    194                //display_3=ipPtr;
    195                //ipPtr=secondipBuff;
    196                //display_4=ipPtr;
    197                if(pingTimer > FOR_FIVE_SECONDS){
   \   0000A0   B290E903.... CMP.W   #0x3e9, &pingTimer
   \   0000A6   0628         JNC     ??main_5
    198                  pingTimer = RESET;
   \   0000A8   8243....     MOV.W   #0x0, &pingTimer
    199                  uart_puts("AT+S.PING=10.139.64.1\r"); //ping gateway 10.139.64.1
   \   0000AC   3C40....     MOV.W   #`?<Constant "AT+S.PING=10.139.64.1\\r">`, R12
   \   0000B0   ........     CALLA   #uart_puts
    200                }
    201                if((reconnectTimer >= FOR_THIRTY_SECONDS) && !startBlackLine){ //reset IOT
   \                     ??main_5:
   \   0000B4   B2907017.... CMP.W   #0x1770, &reconnectTimer
   \   0000BA   0B28         JNC     ??main_2
   \   0000BC   8293....     CMP.W   #0x0, &startBlackLine
   \   0000C0   0820         JNE     ??main_2
    202                  reconnectTimer = RESET;
   \   0000C2   8243....     MOV.W   #0x0, &reconnectTimer
    203                  uart_puts("AT+CFUN=1\r"); 
   \   0000C6   3C40....     MOV.W   #`?<Constant "AT+CFUN=1\\r">`, R12
   \   0000CA   ........     CALLA   #uart_puts
    204                  IOTHardwareReset();
   \   0000CE   ........     CALLA   #IOTHardwareReset
    205                }
    206              }
    207              
    208              
    209              if(startBlackLine){
   \                     ??main_2:
   \   0000D2   8293....     CMP.W   #0x0, &startBlackLine
   \   0000D6   0224         JEQ     ??main_6
    210                blackline(); //run black line detection code  
   \   0000D8   ........     CALLA   #blackline
    211              }
    212              
    213              if(black_line_stop >= 2){ //did i get the command to stop blackline detection?
   \                     ??main_6:
   \   0000DC   A293....     CMP.W   #0x2, &black_line_stop
   \   0000E0   1028         JNC     ??main_7
    214                  startTrackFG = FALSE;
   \   0000E2   8243....     MOV.W   #0x0, &startTrackFG
    215                  black_line_stop = 0;
   \   0000E6   8243....     MOV.W   #0x0, &black_line_stop
    216                  startBlackLine = FALSE;
   \   0000EA   8243....     MOV.W   #0x0, &startBlackLine
    217                  IR_LED_OFF();
   \   0000EE   ........     CALLA   #IR_LED_OFF
    218                  left_wheel_reverse_off();
   \   0000F2   ........     CALLA   #left_wheel_reverse_off
    219                  right_wheel_forward_off();
   \   0000F6   ........     CALLA   #right_wheel_forward_off
    220                  right_wheel_reverse_off();
   \   0000FA   ........     CALLA   #right_wheel_reverse_off
    221                  left_wheel_forward_off();
   \   0000FE   ........     CALLA   #left_wheel_forward_off
    222              }
    223              
    224              if(StartCommandFG){ //StartCommandFG is true once "." has been received
   \                     ??main_7:
   \   000102   8293....     CMP.W   #0x0, &StartCommandFG
   \   000106   0224         JEQ     ??main_8
    225                  commandTree();
   \   000108   ........     CALLA   #commandTree
    226              }
    227          
    228              clearReceiveBuffer();
   \                     ??main_8:
   \   00010C   ........     CALLA   #clearReceiveBuffer
    229              parseIOTData();
   \   000110   ........     CALLA   #parseIOTData
   \   000114   A03F         JMP     ??main_0
   \   000116   0343         NOP
   \   000118                REQUIRE _A_PJOUT_L
    230            }
    231          //------------------------------------------------------------------------------
    232          }
    233          
    234          

   \                                 In  segment CODE, align 2
    235          void clearReceiveBuffer(void){
   \                     clearReceiveBuffer:
    236              if(newLineFG==TRUE){
   \   000000   9293....     CMP.W   #0x1, &newLineFG
   \   000004   1120         JNE     ??clearReceiveBuffer_1
    237                  newLineFG=FALSE;
   \   000006   8243....     MOV.W   #0x0, &newLineFG
    238                  receivingInd=0; //reset index
   \   00000A   8243....     MOV.W   #0x0, &receivingInd
    239                  for(i=0;i<100;i++){ //clear buffer
   \   00000E   8243....     MOV.W   #0x0, &i
   \                     ??clearReceiveBuffer_0:
   \   000012   B2906400.... CMP.W   #0x64, &i
   \   000018   072C         JC      ??clearReceiveBuffer_1
    240                      receiving[i]='\0';
   \   00001A   1F42....     MOV.W   &i, R15
   \   00001E   CF43....     MOV.B   #0x0, receiving(R15)
    241                  }
   \   000022   9253....     ADD.W   #0x1, &i
   \   000026   F53F         JMP     ??clearReceiveBuffer_0
    242              }
    243          }
   \                     ??clearReceiveBuffer_1:
   \   000028   1001         RETA
    244          
    245          

   \                                 In  segment CODE, align 2
    246          void parseIOTData(void){
   \                     parseIOTData:
    247              for(i=0;i<=100-3;i++){ //search through received strings
   \   000000   8243....     MOV.W   #0x0, &i
   \                     ??parseIOTData_3:
   \   000004   B2906200.... CMP.W   #0x62, &i
   \   00000A   E42C         JC      ??parseIOTData_6
    248                  if(receiving[i]=='D'){
   \   00000C   1F42....     MOV.W   &i, R15
   \   000010   FF904400.... CMP.B   #0x44, receiving(R15)
   \   000016   DB20         JNE     ??parseIOTData_7
    249                      if(receiving[i+1]==':'){
   \   000018   1F42....     MOV.W   &i, R15
   \   00001C   FF903A00.... CMP.B   #0x3a, receiving + 1(R15)
   \   000022   D520         JNE     ??parseIOTData_7
    250                          if(receiving[i+2]=='2'){
   \   000024   1F42....     MOV.W   &i, R15
   \   000028   FF903200.... CMP.B   #0x32, receiving + 2(R15)
   \   00002E   A520         JNE     ??parseIOTData_8
    251                              Five_msec_Delay(1);
   \   000030   1C43         MOV.W   #0x1, R12
   \   000032   ........     CALLA   #Five_msec_Delay
    252                              if(receiving[i+3]=='1'){
   \   000036   1F42....     MOV.W   &i, R15
   \   00003A   FF903100.... CMP.B   #0x31, receiving + 3(R15)
   \   000040   0620         JNE     ??parseIOTData_9
    253                                  display_4="Scanning";
   \   000042   B240........ MOV.W   #`?<Constant "Scanning">`, &display_4
    254                                  Display_Process();
   \   000048   ........     CALLA   #Display_Process
   \   00004C   C03C         JMP     ??parseIOTData_7
    255                              }
    256                              else if(receiving[i+3]=='4'){
   \                     ??parseIOTData_9:
   \   00004E   1F42....     MOV.W   &i, R15
   \   000052   FF903400.... CMP.B   #0x34, receiving + 3(R15)
   \   000058   6920         JNE     ??parseIOTData_10
    257                                  countP=0; //initialize period counter
   \   00005A   8243....     MOV.W   #0x0, &countP
    258                                  Five_msec_Delay(3); //short delay to allow all characters to enter
   \   00005E   3C400300     MOV.W   #0x3, R12
   \   000062   ........     CALLA   #Five_msec_Delay
    259                                  j=0;
   \   000066   8243....     MOV.W   #0x0, &j
    260                                  for(i=17;receiving[i] != '\r';i++){ //go from beginning of address until 2nd period hit (2nd group)
   \   00006A   B2401100.... MOV.W   #0x11, &i
   \                     ??parseIOTData_0:
   \   000070   1F42....     MOV.W   &i, R15
   \   000074   FF900D00.... CMP.B   #0xd, receiving(R15)
   \   00007A   1724         JEQ     ??parseIOTData_5
    261                                      if(receiving[i] == '.'){
   \   00007C   1F42....     MOV.W   &i, R15
   \   000080   FF902E00.... CMP.B   #0x2e, receiving(R15)
   \   000086   0220         JNE     ??parseIOTData_11
    262                                          countP++;
   \   000088   9253....     ADD.W   #0x1, &countP
    263                                      }
    264                                      if(countP >=2){ //stop copying to buffer if 2nd period has been hit (2nd "group" is copied)
   \                     ??parseIOTData_11:
   \   00008C   A293....     CMP.W   #0x2, &countP
   \   000090   0C2C         JC      ??parseIOTData_5
    265                                          break;
    266                                      }
    267                                      firstipBuff[j]=receiving[i];
   \   000092   1F42....     MOV.W   &i, R15
   \   000096   1E42....     MOV.W   &j, R14
   \   00009A   DE4F........ MOV.B   receiving(R15), firstipBuff(R14)
    268                                      j++;
   \   0000A0   9253....     ADD.W   #0x1, &j
    269                                  }
   \   0000A4   9253....     ADD.W   #0x1, &i
   \   0000A8   E33F         JMP     ??parseIOTData_0
    270                                  posL3=(10-j)/2; //center first half of ip address
   \                     ??parseIOTData_5:
   \   0000AA   3E400A00     MOV.W   #0xa, R14
   \   0000AE   1E82....     SUB.W   &j, R14
   \   0000B2   5E03         RRUM.W  #0x1, R14
   \   0000B4   C24E....     MOV.B   R14, &posL3
    271                                  i++; //skip the period
   \   0000B8   9253....     ADD.W   #0x1, &i
    272                                  for(j=0;receiving[i] != '\r';i++){
   \   0000BC   8243....     MOV.W   #0x0, &j
   \                     ??parseIOTData_1:
   \   0000C0   1F42....     MOV.W   &i, R15
   \   0000C4   FF900D00.... CMP.B   #0xd, receiving(R15)
   \   0000CA   0C24         JEQ     ??parseIOTData_12
    273                                      secondipBuff[j]=receiving[i];
   \   0000CC   1F42....     MOV.W   &i, R15
   \   0000D0   1E42....     MOV.W   &j, R14
   \   0000D4   DE4F........ MOV.B   receiving(R15), secondipBuff(R14)
    274                                      j++;
   \   0000DA   9253....     ADD.W   #0x1, &j
    275                                  }
   \   0000DE   9253....     ADD.W   #0x1, &i
   \   0000E2   EE3F         JMP     ??parseIOTData_1
    276                                  posL4=(10-j)/2; //center second half of ip address
   \                     ??parseIOTData_12:
   \   0000E4   3E400A00     MOV.W   #0xa, R14
   \   0000E8   1E82....     SUB.W   &j, R14
   \   0000EC   5E03         RRUM.W  #0x1, R14
   \   0000EE   C24E....     MOV.B   R14, &posL4
    277                                  ipPtr=firstipBuff;
   \   0000F2   B240........ MOV.W   #firstipBuff, &ipPtr
    278                                  display_3=ipPtr;
   \   0000F8   9242........ MOV.W   &ipPtr, &display_3
    279                                  ipPtr=secondipBuff;
   \   0000FE   B240........ MOV.W   #secondipBuff, &ipPtr
    280                                  display_4=ipPtr;
   \   000104   9242........ MOV.W   &ipPtr, &display_4
    281                                  lcd_4line();
   \   00010A   ........     CALLA   #lcd_4line
    282                                  Display_Process();
   \   00010E   ........     CALLA   #Display_Process
    283                                  Five_msec_Delay(600); //display IP for 3 seconds before screen gets cleared by menus
   \   000112   3C405802     MOV.W   #0x258, R12
   \   000116   ........     CALLA   #Five_msec_Delay
    284                                  
    285                                  display_IPFG = TRUE;
   \   00011A   9243....     MOV.W   #0x1, &display_IPFG
    286                                  MainFG = FALSE;
   \   00011E   8243....     MOV.W   #0x0, &MainFG
    287                                  BaudMenuFG = FALSE;
   \   000122   8243....     MOV.W   #0x0, &BaudMenuFG
    288                                  IOTMenuFG = FALSE;
   \   000126   8243....     MOV.W   #0x0, &IOTMenuFG
   \   00012A   513C         JMP     ??parseIOTData_7
    289                                  
    290                              }
    291                              else if(receiving[i+3]=='5'){
   \                     ??parseIOTData_10:
   \   00012C   1F42....     MOV.W   &i, R15
   \   000130   FF903500.... CMP.B   #0x35, receiving + 3(R15)
   \   000136   4B20         JNE     ??parseIOTData_7
    292                                  Five_msec_Delay(5);//short delay to allow all characters to enter
   \   000138   3C400500     MOV.W   #0x5, R12
   \   00013C   ........     CALLA   #Five_msec_Delay
    293                                  for(i=32;receiving[i] != '\'' && i<=42 ;i++){ //copy SSID until end of quoted name or until max size for LCD is hit
   \   000140   B2402000.... MOV.W   #0x20, &i
   \                     ??parseIOTData_2:
   \   000146   1F42....     MOV.W   &i, R15
   \   00014A   FF902700.... CMP.B   #0x27, receiving(R15)
   \   000150   0E24         JEQ     ??parseIOTData_13
   \   000152   B2902B00.... CMP.W   #0x2b, &i
   \   000158   0A2C         JC      ??parseIOTData_13
    294                                      SSIDBuff[i-32]=receiving[i];
   \   00015A   1F42....     MOV.W   &i, R15
   \   00015E   1E42....     MOV.W   &i, R14
   \   000162   DE4F........ MOV.B   receiving(R15), LWRD(SSIDBuff + 65504)(R14)
    295                                  }
   \   000168   9253....     ADD.W   #0x1, &i
   \   00016C   EC3F         JMP     ??parseIOTData_2
    296                                  SSIDPtr=SSIDBuff;
   \                     ??parseIOTData_13:
   \   00016E   B240........ MOV.W   #SSIDBuff, &SSIDPtr
    297                                  posL1=0;
   \   000174   C243....     MOV.B   #0x0, &posL1
   \   000178   2A3C         JMP     ??parseIOTData_7
    298                                  //SSID is displayed in D:24
    299                              }
    300                              
    301                          }
    302                          else if(receiving[i+2]=='3'){ //clear display once scanning is complete
   \                     ??parseIOTData_8:
   \   00017A   1F42....     MOV.W   &i, R15
   \   00017E   FF903300.... CMP.B   #0x33, receiving + 2(R15)
   \   000184   0C20         JNE     ??parseIOTData_14
    303                              if(receiving[i+3]=='5'){
   \   000186   1F42....     MOV.W   &i, R15
   \   00018A   FF903500.... CMP.B   #0x35, receiving + 3(R15)
   \   000190   1E20         JNE     ??parseIOTData_7
    304                                  display_4="          "; 
   \   000192   B240........ MOV.W   #`?<Constant "          ">`, &display_4
    305                                  Display_Process();
   \   000198   ........     CALLA   #Display_Process
   \   00019C   183C         JMP     ??parseIOTData_7
    306                              }
    307                          }
    308                          else if(receiving[i+2]=='4'){ //detect disassociation --> reassociate by resetting module
   \                     ??parseIOTData_14:
   \   00019E   1F42....     MOV.W   &i, R15
   \   0001A2   FF903400.... CMP.B   #0x34, receiving + 2(R15)
   \   0001A8   1220         JNE     ??parseIOTData_7
    309                              if(receiving[i+3]=='1'){
   \   0001AA   1F42....     MOV.W   &i, R15
   \   0001AE   FF903100.... CMP.B   #0x31, receiving + 3(R15)
   \   0001B4   0C20         JNE     ??parseIOTData_7
    310                                  uart_puts("AT+CFUN=1\r"); //Get SSID to ncsu
   \   0001B6   3C40....     MOV.W   #`?<Constant "AT+CFUN=1\\r">`, R12
   \   0001BA   ........     CALLA   #uart_puts
    311                                  PJOUT &= ~IOT_RESET; //reset IOT
   \   0001BE   B2C22203     BIC.W   #0x8, &0x322
    312                                  Five_msec_Delay(10); //wait 50 ms
   \   0001C2   3C400A00     MOV.W   #0xa, R12
   \   0001C6   ........     CALLA   #Five_msec_Delay
    313                                  PJOUT |= IOT_RESET; //turn IOT back on (stop reset)
   \   0001CA   B2D22203     BIS.W   #0x8, &0x322
    314                              }
    315                          }
    316                      }
    317                  }
    318              }
   \                     ??parseIOTData_7:
   \   0001CE   9253....     ADD.W   #0x1, &i
   \   0001D2   183F         JMP     ??parseIOTData_3
    319          }
   \                     ??parseIOTData_6:
   \   0001D4   1001         RETA
   \   0001D6                REQUIRE _A_PJOUT_L
    320          

   \                                 In  segment CODE, align 2
    321          int atoi(char *string){
   \                     atoi:
   \   000000   0E4C         MOV.W   R12, R14
    322            int l, converted;
    323            converted = RESET;
   \   000002   0C43         MOV.W   #0x0, R12
    324            for(l=RESET; string[l] != '\0'; ++l){
   \   000004   0D43         MOV.W   #0x0, R13
   \                     ??atoi_0:
   \   000006   0F4E         MOV.W   R14, R15
   \   000008   0F5D         ADD.W   R13, R15
   \   00000A   CF930000     CMP.B   #0x0, 0(R15)
   \   00000E   0B24         JEQ     ??atoi_1
    325              converted = converted*10 + string[l] - '0';
   \   000010   0F4E         MOV.W   R14, R15
   \   000012   0F5D         ADD.W   R13, R15
   \   000014   6F4F         MOV.B   @R15, R15
   \   000016   4F4F         MOV.B   R15, R15
   \   000018                RPT     #0xa
   \   000018   49180F5C     ADDX.W  R12, R15
   \   00001C   0C4F         MOV.W   R15, R12
   \   00001E   3C50D0FF     ADD.W   #0xffd0, R12
    326            }
   \   000022   1D53         ADD.W   #0x1, R13
   \   000024   F03F         JMP     ??atoi_0
    327            return converted;
   \                     ??atoi_1:
   \   000026   1001         RETA
    328          }

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for transmitFG>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  Waiting  ">`:
   \   000000   202057616974 DC8 "  Waiting  "
   \            696E67202000

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    for">`:
   \   000000   20202020666F DC8 "    for"
   \            7200        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  Command  ">`:
   \   000000   2020436F6D6D DC8 "  Command  "
   \            616E64202000

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.PING=10.139.64.1\\r">`:
   \   000000   41542B532E50 DC8 "AT+S.PING=10.139.64.1\015"
   \            494E473D3130
   \            2E3133392E36
   \            342E310D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CFUN=1\\r">`:
   \   000000   41542B434655 DC8 "AT+CFUN=1\015"
   \            4E3D310D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Scanning">`:
   \   000000   5363616E6E69 DC8 "Scanning"
   \            6E6700      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  
    329          
    330          
    331          
    332          
    333          
    334          
    335          
    336          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   atoi
      4   clearReceiveBuffer
      4   main
        4   -> ADC_Process
        4   -> Baud_Menu
        4   -> Display_Process
        4   -> Five_msec_Delay
        4   -> HEXtoBCD
        4   -> IOTHardwareReset
        4   -> IOT_Menu
        4   -> IR_LED_OFF
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_Serial_UCA0
        4   -> Init_Serial_UCA1
        4   -> Init_Timers
        4   -> Menu_Process
        4   -> blackline
        4   -> clearReceiveBuffer
        4   -> commandTree
        4   -> lcd_BIG_mid
        4   -> left_wheel_forward_off
        4   -> left_wheel_reverse_off
        4   -> parseIOTData
        4   -> right_wheel_forward_off
        4   -> right_wheel_reverse_off
        4   -> uart_puts
        4 ?DivMod16u
      4   parseIOTData
        4   -> Display_Process
        4   -> Five_msec_Delay
        4   -> lcd_4line
        4   -> uart_puts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       8  ?<Constant "    for">
      12  ?<Constant "  Command  ">
      12  ?<Constant "  Waiting  ">
       1  ?<Constant "">
      11  ?<Constant "AT+CFUN=1\r">
      23  ?<Constant "AT+S.PING=10.139.64.1\r">
       9  ?<Constant "Scanning">
       2  ?<Initializer for transmitFG>
       2  ADC_Left_Detector
       2  ADC_Right_Detector
       2  ADC_Thumb
     100  IOTBufferReceive
       2  IOTIndexReceive
       2  IOTIndexTransmit
      11  SSIDBuff
       2  SSIDPtr
       2  StartCommandFG
       2  _A_PJOUT_L
       5  adc_char
      40  atoi
       2  black_line_stop
      42  clearReceiveBuffer
      30  commandBuffer
       2  commandIndex
       3  control_state
       2  countP
       2  display_IPFG
       2  display_count
      11  firstipBuff
       2  five_msec_delay
       2  i
       2  ipPtr
       2  j
       2  k
       1  led_smclk
       2  left_calibration_black
       2  left_calibration_white
       2  macFG
       2  macPtr
     280  main
       2  menu_items
       2  newLineFG
       1  one_time
     470  parseIOTData
       2  pingTimer
       1  posL1
       1  posL2
       1  posL3
       1  posL4
     100  receiving
       2  receivingInd
       2  reconnectTimer
       2  right_calibration_black
       2  right_calibration_white
      11  secondipBuff
       2  startTrackFG
       2  start_on_whiteFG
       2  thresholdL
       2  thresholdR
       2  trackTimer
       2  transmitFG
       2  writeCommandFG

 
 832 bytes in segment CODE
   2 bytes in segment DATA16_AN
  87 bytes in segment DATA16_C
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
 345 bytes in segment DATA16_Z
 
 832 bytes of CODE  memory
  89 bytes of CONST memory
 347 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
