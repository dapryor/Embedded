###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           25/Feb/2016  23:35:02
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.40
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\David\SkyDrive\ECE 306\homework-05\motors.c
#    Command line  =  
#        "C:\Users\David\SkyDrive\ECE 306\homework-05\motors.c" -lC
#        "C:\Users\David\SkyDrive\ECE 306\homework-05\Debug\List" -o
#        "C:\Users\David\SkyDrive\ECE 306\homework-05\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5739__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\David\SkyDrive\ECE 306\homework-05\Debug\List\motors.lst
#    Object file   =  
#        C:\Users\David\SkyDrive\ECE 306\homework-05\Debug\Obj\motors.r43
#
###############################################################################

C:\Users\David\SkyDrive\ECE 306\homework-05\motors.c
      1          //------------------------------------------------------------------------------
      2          //  File Name : motors.c
      3          //
      4          //  Description: This files contains functions for straight lines and turns
      5          //
      6          //
      7          //  David Pryor
      8          //  Feb 2016
      9          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
     10          //------------------------------------------------------------------------------
     11          //
     12          #include  "macros.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2
     14          #include  "functions.h"
     15          
     16          // MACROS ----------------------------------------------------------------------
     17          // R_FORWARD        	                (0x10) // This was LED 5
     18          // R_REVERSE        	                (0x20) // This was LED 6
     19          // L_FORWARD        	                (0x40) // This was LED 7
     20          // L_REVERSE        	                (0x80) // This was LED 8
     21          //------------------------------------------------------------------------------
     22          

   \                                 In  segment CODE, align 2
     23          void left_wheel_forward_on(void){
   \                     left_wheel_forward_on:
     24          //==============================================================================
     25          // Left Wheel Forward On
     26          // 
     27          // Description: This function turns on the left motor for forward use
     28          //
     29          // Passed : no variables passed
     30          // Locals: no variables declared
     31          // Returned: no values returned
     32          // Globals:  no global variables
     33          //
     34          // Author: David Pryor
     35          // Date: Feb 2016
     36          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (6.4.1)
     37          //==============================================================================  
     38            if(!(P3IN & L_FORWARD)){ // is the LEFT wheel NOT going forward?
   \   000000   F2B040002002 BIT.B   #0x40, &0x220
   \   000006   032C         JC      ??left_wheel_forward_on_0
     39              //left_wheel_reverse_off(); // making sure left wheel is NOT reversing
     40              P3OUT |= L_FORWARD; // turn ON LEFT wheel forward
   \   000008   F2D040002202 BIS.B   #0x40, &0x222
     41            }
     42          }
   \                     ??left_wheel_forward_on_0:
   \   00000E   1001         RETA
   \   000010                REQUIRE _A_PBIN_L
   \   000010                REQUIRE _A_PBOUT_L
     43          

   \                                 In  segment CODE, align 2
     44          void left_wheel_forward_off(void){
   \                     left_wheel_forward_off:
     45          //==============================================================================
     46          // Left Wheel Forward Off
     47          // 
     48          // Description: This function turns the left motor off
     49          //
     50          // Passed : no variables passed
     51          // Locals: no variables declared
     52          // Returned: no values returned
     53          // Globals:  no global variables
     54          //
     55          // Author: David Pryor
     56          // Date: Feb 2016
     57          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (6.4.1)
     58          //==============================================================================  
     59            if(P3IN & L_FORWARD){ // is the left wheel going forward?
   \   000000   F2B040002002 BIT.B   #0x40, &0x220
   \   000006   0328         JNC     ??left_wheel_forward_off_0
     60              P3OUT &= ~L_FORWARD; // turn OFF left wheel forward
   \   000008   F2C040002202 BIC.B   #0x40, &0x222
     61            }
     62          }
   \                     ??left_wheel_forward_off_0:
   \   00000E   1001         RETA
   \   000010                REQUIRE _A_PBIN_L
   \   000010                REQUIRE _A_PBOUT_L
     63          

   \                                 In  segment CODE, align 2
     64          void right_wheel_forward_on(void){
   \                     right_wheel_forward_on:
     65          //==============================================================================
     66          // Right Wheel Forward On
     67          // 
     68          // Description: This function turns on the right motor for forward use
     69          //
     70          // Passed : no variables passed
     71          // Locals: no variables declared
     72          // Returned: no values returned
     73          // Globals:  no global variables
     74          //
     75          // Author: David Pryor
     76          // Date: Feb 2016
     77          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (6.4.1)
     78          //==============================================================================
     79            if(!(P3IN & R_FORWARD)){ // is the RIGHT wheel NOT going forward?
   \   000000   F2B010002002 BIT.B   #0x10, &0x220
   \   000006   032C         JC      ??right_wheel_forward_on_0
     80              //right_wheel_reverse_off(); // making sure RIGHT wheel is NOT reversing
     81              P3OUT |= R_FORWARD; // turn ON RIGHT wheel forward
   \   000008   F2D010002202 BIS.B   #0x10, &0x222
     82            }
     83          }
   \                     ??right_wheel_forward_on_0:
   \   00000E   1001         RETA
   \   000010                REQUIRE _A_PBIN_L
   \   000010                REQUIRE _A_PBOUT_L
     84          

   \                                 In  segment CODE, align 2
     85          void right_wheel_forward_off(void){
   \                     right_wheel_forward_off:
     86          //==============================================================================
     87          // Right Wheel Forward Off
     88          // 
     89          // Description: This function turns the right motor off
     90          //
     91          // Passed : no variables passed
     92          // Locals: no variables declared
     93          // Returned: no values returned
     94          // Globals:  no global variables
     95          //
     96          // Author: David Pryor
     97          // Date: Feb 2016
     98          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (6.4.1)
     99          //==============================================================================
    100            if(P3IN & R_FORWARD){ // is the RIGHT wheel going forward?
   \   000000   F2B010002002 BIT.B   #0x10, &0x220
   \   000006   0328         JNC     ??right_wheel_forward_off_0
    101              P3OUT &= ~R_FORWARD; // turn OFF RIGHT wheel forward
   \   000008   F2C010002202 BIC.B   #0x10, &0x222
    102            }
    103          }
   \                     ??right_wheel_forward_off_0:
   \   00000E   1001         RETA
   \   000010                REQUIRE _A_PBIN_L
   \   000010                REQUIRE _A_PBOUT_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   left_wheel_forward_off
      4   left_wheel_forward_on
      4   right_wheel_forward_off
      4   right_wheel_forward_on


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  _A_PBIN_L
       2  _A_PBOUT_L
      16  left_wheel_forward_off
      16  left_wheel_forward_on
      16  right_wheel_forward_off
      16  right_wheel_forward_on

 
 64 bytes in segment CODE
  4 bytes in segment DATA16_AN
 
 64 bytes of CODE memory
  0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
